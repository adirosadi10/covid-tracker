{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","images/image.png","App.js","index.js","App.module.css","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","varian","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","changeableUrl","axios","get","console","log","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Chart","useState","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","NativeSelect","defaultValue","onChange","e","target","i","App","state","fetchedData","setState","this","image","alt","src","coronaImage","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6d1ed563.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__2R6r4\",\"card\":\"Cards_card__1XhPN\",\"infected\":\"Cards_infected__31u57\",\"recovered\":\"Cards_recovered__pxgVb\",\"deaths\":\"Cards_deaths__gPoGe\"};","import React from 'react'\r\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core';\r\nimport styles from \"./Cards.module.css\";\r\nimport CountUp from \"react-countup\";\r\nimport cx from 'classnames'\r\n\r\nconst Cards = ({ data : {confirmed,  recovered, deaths, lastUpdate}}) => {\r\n  if(!confirmed){\r\n    return 'Loading....'\r\n  }\r\n  return (\r\n    <div className={styles.container}>\r\n      <Grid container spacing={3} justify=\"center\" >\r\n        <Grid item component={Card} xs={12} md={3}  className={cx(styles.card, styles.infected)} >\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom >Infected</Typography>\r\n            <Typography varian=\"h5\">\r\n              <CountUp  start={0} end={confirmed.value} duration={2.5} separator=\",\" />\r\n            </Typography>\r\n            <Typography color=\"textSecondary\" gutterBottom >{new Date(lastUpdate).toDateString()}</Typography>\r\n            <Typography varian=\"body2\">Number of active case of COVID 19 </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n        <Grid item component={Card} xs={12} md={3}  className={cx(styles.card, styles.recovered)}>\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom >Recovered</Typography>\r\n            <Typography varian=\"h5\">\r\n              <CountUp  start={0} end={recovered.value} duration={2.5} separator=\",\" />\r\n            </Typography>\r\n            <Typography color=\"textSecondary\" gutterBottom >{new Date(lastUpdate).toDateString()}</Typography>\r\n            <Typography varian=\"body2\">Number of recoveries from COVID 19 </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n        <Grid item component={Card} xs={12} md={3}  className={cx(styles.card, styles.deaths)}>\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom >Deaths</Typography>\r\n            <Typography varian=\"h5\">\r\n              <CountUp  start={0} end={deaths.value} duration={2.5} separator=\",\"/>\r\n            </Typography>\r\n            <Typography color=\"textSecondary\" gutterBottom >{new Date(lastUpdate).toDateString()}</Typography>\r\n            <Typography varian=\"body2\">Number of deaths caused by COVID 19 </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Cards\r\n","import axios from \"axios\";\r\n\r\nconst url = 'https://covid19.mathdro.id/api';\r\n\r\nexport const fetchData = async (country) => {\r\n  let changeableUrl= url;\r\n  if(country){\r\n    changeableUrl = `${url}/countries/${country}`\r\n  }\r\n  try {\r\n    const {data: {confirmed, recovered, deaths,lastUpdate} } = await axios.get(changeableUrl)\r\n\r\n    return { confirmed, recovered, deaths, lastUpdate };\r\n  } catch (error) {\r\n    console.log(error)\r\n  }\r\n}\r\nexport const fetchDailyData = async () => {\r\n  try {\r\n    const {data} = await axios.get(`${url}/daily`)\r\n    const modifiedData = data.map((dailyData) => ({\r\n      confirmed: dailyData.confirmed.total,\r\n      // recovered: dailyData.recovered.total,\r\n      deaths: dailyData.deaths.total,\r\n      date: dailyData.reportDate,\r\n    }))\r\n\r\n    return modifiedData\r\n  } catch (error) {\r\n    console.log(error)\r\n  }\r\n}\r\n\r\nexport const fetchCountries = async () => {\r\n  try {\r\n    const { data: { countries } } = await axios.get(`${url}/countries`)\r\n\r\n    return countries.map((country) => country.name)\r\n  } catch (error) {\r\n    console.log(error)\r\n  }\r\n}","import React, { useState, useEffect } from 'react'\r\nimport {fetchDailyData} from '../../api'\r\nimport { Line, Bar } from 'react-chartjs-2'\r\n\r\nimport styles from './Chart.module.css'\r\n\r\nconst Chart = ({ data: {confirmed, recovered, deaths}, country }) =>{\r\n  const [dailyData, setDailyData] = useState([])\r\n\r\n  useEffect(() =>{\r\n    const fetchAPI = async () => {\r\n      setDailyData (await fetchDailyData())\r\n    }\r\n\r\n    fetchAPI()\r\n  },[])\r\n  const lineChart = (\r\n    dailyData.length\r\n    ?(\r\n    < Line \r\n      data={{\r\n        labels: dailyData.map(({date}) => date ) ,\r\n        datasets:[{\r\n          data: dailyData.map(({ confirmed }) => confirmed ),\r\n          label: 'infeted',\r\n          borderColor: '#3333ff',\r\n          fill: true,\r\n        },\r\n        // {\r\n        //   data: dailyData.map(({ recovered }) => recovered ),\r\n        //   label: 'recovered',\r\n        //   borderColor: 'green',\r\n        //   backgroundColor: 'rgba( 0, 255, 0, 0.5 )',\r\n        //   fill: true,\r\n        // },\r\n        {\r\n          data: dailyData.map(({ deaths }) => deaths ),\r\n          label: 'Deaths',\r\n          borderColor: 'red',\r\n          backgroundColor: 'rgba(255, 0, 0, 0.5 )',\r\n          fill: true,\r\n        }]\r\n      }}\r\n    />) : null\r\n  )\r\n\r\n  const barChart = (\r\n    confirmed\r\n    ? (\r\n      <Bar \r\n        data = {{\r\n          labels: ['infected', 'recovered', 'deaths'],\r\n          datasets: [{\r\n            label: 'people',\r\n            backgroundColor: [\r\n              'rgba(0, 0, 255, 0.5)',\r\n              'rgba(0,  255, 0, 0.5)',\r\n              'rgba(255, 0, 0, 0.5)',\r\n            ],\r\n            data:[confirmed.value, recovered.value, deaths.value]\r\n          }] \r\n        }}\r\n        options={{\r\n          legend: {display: false},\r\n          title: {display:true, text:`current state in ${country}`}\r\n        }}\r\n      />\r\n    ) : null\r\n  )\r\n\r\n  return (\r\n    <div className={styles.container} >\r\n      { country ? barChart : lineChart}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Chart\r\n","import React, { useState, useEffect } from 'react'\r\nimport { NativeSelect, FormControl } from \"@material-ui/core\";\r\n\r\nimport styles from \"./CountryPicker.module.css\"\r\nimport { fetchCountries } from \"../../api\"\r\n\r\nconst CountryPicker = ( {handleCountryChange} ) => {\r\n  const [ fetchedCountries, setFetchedCountries ] = useState([]);\r\n\r\n  useEffect (() => {\r\n    const fetchAPI = async () => {\r\n      setFetchedCountries(await fetchCountries())\r\n    }\r\n    fetchAPI()\r\n  }, [setFetchedCountries])\r\n\r\n  return (\r\n    <FormControl className={styles.FormControl} >\r\n      <NativeSelect defaultValue=\"\" onChange={(e) =>handleCountryChange(e.target.value) } >\r\n        <option value=\"\" >Global</option>\r\n        {fetchedCountries.map((country, i) => <option key={i} value={country} >{country}</option> )}\r\n      </NativeSelect>\r\n    </FormControl>\r\n  )\r\n}\r\n\r\nexport default CountryPicker\r\n","export default __webpack_public_path__ + \"static/media/image.9e5d4fc7.png\";","import React from 'react'\r\nimport { Cards, Chart, CountryPicker } from \"./components\";\r\nimport styles from \"./App.module.css\";\r\nimport {fetchData} from './api';\r\nimport coronaImage from './images/image.png'\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    data : {},\r\n    country: '',\r\n  }\r\n\r\n  async componentDidMount(){\r\n    const fetchedData = await fetchData()\r\n    this.setState({ data: fetchedData })\r\n  }\r\n  handleCountryChange = async (country) => {\r\n    const fetchedData = await fetchData(country)\r\n\r\n    this.setState({ data: fetchedData, country: country })\r\n\r\n\r\n  }\r\n  render() {\r\n    const {data, country } = this.state\r\n    return (\r\n      <div className={styles.container} >\r\n        <img className={styles.image} alt=\"COVID-19\" src={coronaImage} />\r\n        <Cards data={data} />\r\n        <CountryPicker handleCountryChange={this.handleCountryChange} />\r\n        <Chart data={data} country={country} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App\r\n","import { React } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\"\r\n\r\nReactDOM.render(<App/>,document.getElementById('root'))","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1n68k\",\"image\":\"App_image__EH6QD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__2zWhP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__39NUM\"};"],"sourceRoot":""}